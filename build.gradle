apply plugin: 'application'
mainClassName = 'com.koval.jresolver.Launcher'

run {
  workingDir = file('src')
}

task createDataSet(type: JavaExec) {
  group 'application'
  main = "$mainClassName"
  classpath = sourceSets.main.runtimeClasspath
  workingDir = file('src')
  args = ['create-data-set']
}

task createVectorModel(type: JavaExec) {
  group 'application'
  main = "$mainClassName"
  classpath = sourceSets.main.runtimeClasspath
  workingDir = file('src')
  args = ['create-vector-model']
}

task cleanWorkFolders(type: JavaExec) {
  group 'application'
  main = "$mainClassName"
  classpath = sourceSets.main.runtimeClasspath
  workingDir = file('src')
  args = ['clean']
}

sourceSets {
  main {
    resources {
      srcDir 'data'
      srcDir 'src/main/resources'
      srcDir 'jira-connector/src/main/resources'
      srcDir 'similarity-processor/src/main/resources'
      srcDir 'rule-engine-processor/src/main/resources'
      srcDir 'report-generator/src/main/resources'
    }
  }
}

dependencies {
  compile project(':similarity-processor'),
      project(':rule-engine-processor'),
      project(':report-generator')
}

wrapper {
  gradleVersion = '4.6'
}

distributions {
  main {
    baseName = 'jresolver'
    contents {
      from('jira-connector/src/main/resources/connector.properties') { into 'config' }
      from('similarity-processor/src/main/resources/similarity-processor.properties') { into 'config' }
      from('report-generator/src/main/resources') { into 'config' }
      from('src/main/resources/logback.xml') { into 'config' }
      from('rule-engine-processor/src/main/resources') { into 'rules' }
      exclude('**/opencv*.jar')
    }
  }
}

startScripts {
  classpath += files('config')
  doLast {
    def windowsScriptFile = file getWindowsScript()
    def unixScriptFile = file getUnixScript()
    windowsScriptFile.text = windowsScriptFile.text
        .replaceAll(/CLASSPATH=\S+/, 'CLASSPATH=%APP_HOME%/lib/;%APP_HOME%/lib/*;%APP_HOME%/config;%APP_HOME%/rules;%APP_HOME%/data')
    unixScriptFile.text = unixScriptFile.text
        .replaceAll(/CLASSPATH=\S+/, 'CLASSPATH=%APP_HOME%/lib/;%APP_HOME%/lib/*;%APP_HOME%/config;%APP_HOME%/rules;%APP_HOME%/data')
  }
}

task createPrepareScript(type: CreateStartScripts) {
  mainClassName = startScripts.mainClassName
  classpath = startScripts.classpath
  outputDir = startScripts.outputDir
  applicationName = 'prepare'

  createPrepareScript {
    doLast {
      def windowsScriptFile = file getWindowsScript()
      def unixScriptFile = file getUnixScript()
      windowsScriptFile.text = windowsScriptFile.text
          .replaceAll(/CLASSPATH=\S+/, 'CLASSPATH=%APP_HOME%/lib/;%APP_HOME%/lib/*;%APP_HOME%/config;%APP_HOME%/rules;%APP_HOME%/data')
      unixScriptFile.text = unixScriptFile.text
          .replaceAll(/CLASSPATH=\S+/, 'CLASSPATH=%APP_HOME%/lib/;%APP_HOME%/lib/*;%APP_HOME%/config;%APP_HOME%/rules;%APP_HOME%/data')
      windowsScriptFile.text = windowsScriptFile.text
          .replaceFirst('CMD_LINE_ARGS=', 'CMD_LINE_ARGS=prepare')
      unixScriptFile.text = unixScriptFile.text
          .replaceFirst('APP_ARGS=', 'APP_ARGS=prepare+')
    }
  }
}

task createConfigureScript(type: CreateStartScripts) {
  mainClassName = startScripts.mainClassName
  classpath = startScripts.classpath
  outputDir = startScripts.outputDir
  applicationName = 'configure'

  createConfigureScript {
    doLast {
      def windowsScriptFile = file getWindowsScript()
      def unixScriptFile = file getUnixScript()
      windowsScriptFile.text = windowsScriptFile.text
          .replaceAll(/CLASSPATH=\S+/, 'CLASSPATH=%APP_HOME%/lib/;%APP_HOME%/lib/*;%APP_HOME%/config;%APP_HOME%/rules;%APP_HOME%/data')
      unixScriptFile.text = unixScriptFile.text
          .replaceAll(/CLASSPATH=\S+/, 'CLASSPATH=%APP_HOME%/lib/;%APP_HOME%/lib/*;%APP_HOME%/config;%APP_HOME%/rules;%APP_HOME%/data')
      windowsScriptFile.text = windowsScriptFile.text
          .replaceFirst('CMD_LINE_ARGS=', 'CMD_LINE_ARGS=configure')
      unixScriptFile.text = unixScriptFile.text
          .replaceFirst('APP_ARGS=', 'APP_ARGS=configure+')
    }
  }
}

task createRunScript(type: CreateStartScripts) {
  mainClassName = startScripts.mainClassName
  classpath = startScripts.classpath
  outputDir = startScripts.outputDir
  applicationName = 'run'

  createRunScript {
    doLast {
      def windowsScriptFile = file getWindowsScript()
      def unixScriptFile = file getUnixScript()
      windowsScriptFile.text = windowsScriptFile.text
          .replaceAll(/CLASSPATH=\S+/, 'CLASSPATH=%APP_HOME%/lib/;%APP_HOME%/lib/*;%APP_HOME%/config;%APP_HOME%/rules;%APP_HOME%/data')
      unixScriptFile.text = unixScriptFile.text
          .replaceAll(/CLASSPATH=\S+/, 'CLASSPATH=%APP_HOME%/lib/;%APP_HOME%/lib/*;%APP_HOME%/config;%APP_HOME%/rules;%APP_HOME%/data')
      windowsScriptFile.text = windowsScriptFile.text
          .replaceFirst('CMD_LINE_ARGS=', 'CMD_LINE_ARGS=run')
      unixScriptFile.text = unixScriptFile.text
          .replaceFirst('APP_ARGS=', 'APP_ARGS=run+')
    }
  }
}

applicationDistribution.into('bin') {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from(createPrepareScript)
  from(createConfigureScript)
  from(createRunScript)
  fileMode = 0755
}

jar {
  exclude('*.xml', '*.zip', '*.txt', '*.properties', '*.vm', '*.drl')
}

defaultTasks 'build'

allprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse'

  group = 'com.koval.jresolver'
  sourceCompatibility = 1.8

  repositories {
    mavenCentral()
    maven {
      url 'https://m2proxy.atlassian.com/repository/public'
    }
    maven {
      url 'http://repository.jboss.org/nexus/content/groups/public-jboss'
    }
  }

  apply plugin: 'checkstyle'
  checkstyle {
    configFile = rootProject.file('config/checkstyle.xml')
    toolVersion = '8.1'
    ignoreFailures = false
  }

  tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
      reports.all { report ->
        def outputFile = report.destination
        if (outputFile.exists() && outputFile.text.contains("<error ")) {
          throw new GradleException("Found checkstyle issues in $outputFile")
        }
      }
    }
  }

  apply plugin: 'pmd'
  pmd {
    ruleSetFiles = rootProject.files('config/pmd.xml')
    toolVersion = '5.4.1'
    ignoreFailures = false
  }

  apply plugin: 'findbugs'
  findbugs {
    toolVersion = '3.0.1'
    excludeFilter = rootProject.file('config/findbugs_filter.xml')
    ignoreFailures = false
  }

  tasks.withType(FindBugs) {
    reports {
      xml.enabled = false
      html.enabled = true
    }
  }

  apply plugin: 'jacoco'
  jacoco {
    reportsDir = file('build/reports/jacoco')
  }

  jacocoTestReport {
    reports {
      xml.enabled = false
      csv.enabled = false
      html.destination file('build/reports/jacoco/jacoco.html')
    }
  }
}