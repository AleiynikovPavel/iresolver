buildscript {
	ext {
		springBootVersion = '1.5.8.RELEASE'
	}
	repositories {
		maven { url 'https://plugins.gradle.org/m2/' }
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'com.moowork.gradle:gradle-node-plugin:1.1.1',
		  'com.moowork.gradle:gradle-gulp-plugin:0.13'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

group = 'com.koval'
version = '0.0.1'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
    //compile('org.springframework.boot:spring-boot-starter-data-jpa')
    //compile('org.springframework.boot:spring-boot-starter-security')
	runtime('com.h2database:h2')
	testCompile('org.springframework.boot:spring-boot-starter-test')
    //testCompile('org.springframework.security:spring-security-test')
}

apply plugin: 'com.moowork.node'
node {
	// Version of node to use.
	version = '6.11.0'
	// Version of npm to use.
	npmVersion = '3.10.10'
	// Base URL for fetching node distributions (change if you have a mirror).
	distBaseUrl = 'http://nodejs.org/dist'
	// If true, it will download node using above parameters.
	// If false, it will try to use globally installed node.
	download = true
	// Set the work directory for unpacking node
	workDir = file("${project.projectDir}")
	// Set the work directory where node_modules should be located
	nodeModulesDir = file("${project.projectDir}")
}

apply plugin: 'checkstyle'
checkstyle {
  configFile = rootProject.file('config/checkstyle.xml')
  toolVersion = '6.17'
  ignoreFailures = false
}

// Despite ignoreFailures=false, the build wonby default 't fail on CheckStyle warnings
// https://issues.gradle.org/browse/GRADLE-2888
tasks.withType(Checkstyle).each { checkstyleTask ->
  checkstyleTask.doLast {
    reports.all { report ->
      def outputFile = report.destination
      if (outputFile.exists() && outputFile.text.contains("<error ")) {
        throw new GradleException("Found checkstyle issues in $outputFile")
      }
    }
  }
}

apply plugin: 'pmd'
pmd {
  ruleSetFiles = rootProject.files('config/pmd.xml')
  toolVersion = '5.4.1'
  ignoreFailures = false
}

apply plugin: 'findbugs'
findbugs {
  toolVersion = '3.0.1'
  excludeFilter = rootProject.file('config/findbugs_filter.xml')
  ignoreFailures = false
}

tasks.withType(FindBugs) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}