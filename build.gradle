buildscript {
  ext {
    springBootVersion = '1.5.8.RELEASE'
  }
  repositories {
    maven { url 'https://plugins.gradle.org/m2/' }
    mavenCentral()
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
  }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'

group = 'com.koval'
version = '0.0.1'
sourceCompatibility = 1.8

repositories {
  mavenCentral()
  maven {
    url 'https://m2proxy.atlassian.com/repository/public'
  }
  maven {
    url 'http://repository.jboss.org/nexus/content/groups/public-jboss'
  }
}

dependencies {
  compile (project(':report-generator')) {
    exclude group: 'ch.qos.logback', module: 'logback-classic'
  }
  compile 'org.slf4j:slf4j-api:1.7.25',
          'org.slf4j:slf4j-log4j12:1.7.25'
  //compile 'org.springframework.boot:spring-boot-starter-web'
  //testCompile 'org.springframework.boot:spring-boot-starter-test'
}

mainClassName = 'com.koval.jresolver.Launcher'

run {
  main = 'com.koval.jresolver.Launcher'
  //args = ['prepare']
  //args = ['configure']
  args = ['run']
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.6'
}

distributions {
  main {
    baseName = 'jresolver'
    contents {
      from('jira-connector/src/main/resources/connector.properties') { into 'config' }
      from('classifier/src/main/resources/classifier.properties') { into 'config' }
      from('src/main/resources/log4j.properties') { into 'config' }
      from('rule-engine/src/main/resources/rules') { into 'rules' }
    }
  }
}

startScripts {
  classpath += files('config')
  doLast {
    def windowsScriptFile = file getWindowsScript()
    def unixScriptFile = file getUnixScript()
    windowsScriptFile.text = windowsScriptFile.text
        .replaceAll(/CLASSPATH=\S+/, 'CLASSPATH=%APP_HOME%/lib/;%APP_HOME%/lib/*;%APP_HOME%/config;%APP_HOME%')
    unixScriptFile.text = unixScriptFile.text
        .replaceAll(/CLASSPATH=\S+/, 'CLASSPATH=%APP_HOME%/lib/;%APP_HOME%/lib/*;%APP_HOME%/config;%APP_HOME%')
  }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'application'

    group = 'com.koval'
    version = '0.0.1'
    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        maven {
            url 'https://m2proxy.atlassian.com/repository/public'
        }
        maven {
            url 'http://repository.jboss.org/nexus/content/groups/public-jboss'
        }
    }

    dependencies {
        /*compile 'org.slf4j:slf4j-api:1.7.25',
                'org.slf4j:slf4j-log4j12:1.7.25'*/
        testCompile 'junit:junit:4.11'
    }

    apply plugin: 'checkstyle'
    checkstyle {
        configFile = rootProject.file('config/checkstyle.xml')
        toolVersion = '8.1'
        ignoreFailures = false
    }

    tasks.withType(Checkstyle).each { checkstyleTask ->
        checkstyleTask.doLast {
            reports.all { report ->
                def outputFile = report.destination
                if (outputFile.exists() && outputFile.text.contains("<error ")) {
                    throw new GradleException("Found checkstyle issues in $outputFile")
                }
            }
        }
    }

    apply plugin: 'pmd'
    pmd {
        ruleSetFiles = rootProject.files('config/pmd.xml')
        toolVersion = '5.4.1'
        ignoreFailures = false
    }

    apply plugin: 'findbugs'
    findbugs {
        toolVersion = '3.0.1'
        excludeFilter = rootProject.file('config/findbugs_filter.xml')
        ignoreFailures = false
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}